generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Event {
  eventID          Int               @id @default(autoincrement())
  EventName        String?           @db.VarChar(100)
  DateStart        DateTime?         @db.DateTime(0)
  DateEnd          DateTime?         @db.DateTime(0)
  EventType        String?           @db.VarChar(20)
  recurringEventID Int?
  attendees        EventAttendance[]
}

model EventAttendance {
  eventId      Int
  personID     Int
  TimeAttended DateTime @default(now())
  Notes        String?  @db.VarChar(500)
  Event        Event    @relation(fields: [eventId], references: [eventID])
  Person       Person   @relation(fields: [personID], references: [id], onDelete: NoAction)

  @@id([eventId, personID, TimeAttended])
  @@index([personID], map: "EventAttendance_personID_fkey")
}

model Major {
  id        Int    @id @default(autoincrement())
  majorName String @unique @db.VarChar(130)
}

model Mentor {
  personID    Int       @id
  StartDate   DateTime? @db.Date
  EndDate     DateTime? @db.Date
  IsDonor     Boolean?  @db.Bit(1)
  CompanyName String?   @db.VarChar(200)
  Role        String?   @db.VarChar(100)
  Notes       String?   @db.VarChar(500)
}

model MentorUpdate {
  mentorUpdateID Int             @id @default(autoincrement())
  TeamHealth     Int?
  Notes          String?         @db.VarChar(500)
  personID       Int?
  teamID         Int?
  TeamMentor     OLD_TeamMentor? @relation(fields: [personID, teamID], references: [personID, teamID], onDelete: NoAction, onUpdate: NoAction, map: "teamMentor_FK")

  @@index([personID, teamID], map: "teamMentor_FK")
}

model Metric {
  metricID    Int     @id @default(autoincrement())
  MetricName  String? @db.VarChar(200)
  Description String? @db.VarChar(500)
}

model OrgMembership {
  orgID       Int
  personID    Int
  DateJoined  DateTime? @db.Date
  DateExpired DateTime? @db.Date
  isPaid      Boolean?  @db.Bit(1)

  @@id([orgID, personID])
}

model OrgTeamMembership {
  teamID     Int
  orgID      Int
  DateJoined DateTime? @db.Date
  DateEnded  DateTime? @db.Date

  @@id([teamID, orgID])
}

model Organization {
  orgID       Int       @id @default(autoincrement())
  orgName     String?   @db.VarChar(50)
  DateFounded DateTime? @db.Date
}

model OrganizationEventLink {
  orgID   Int
  eventID Int

  @@id([orgID, eventID])
}

model Person {
  id              Int               @id @default(autoincrement())
  firstName       String?           @db.VarChar(50)
  lastName        String?           @db.VarChar(50)
  city            String?           @db.VarChar(50)
  state           String?           @db.Char(20)
  country         String?           @db.Char(10)
  phone           String?           @db.VarChar(14)
  email           String?           @db.VarChar(100)
  linkedInUrl     String?           @db.VarChar(200)
  netId           String?           @unique @db.VarChar(20)
  needsUpdate     Boolean?
  preferredName   String?           @db.VarChar(255)
  gender          Person_gender?
  EventAttendance EventAttendance[]
  Student         Student[]
}

model RecurringEvent {
  recurringEventID Int     @id @default(autoincrement())
  eventName        String? @db.VarChar(100)
  eventDescription String? @db.VarChar(150)
}

model Student {
  id             Int             @id @default(autoincrement())
  netId          String?         @unique @db.VarChar(20)
  classStanding  String?         @db.VarChar(20)
  ethnicity      String?         @db.VarChar(50)
  college        String?         @db.VarChar(150)
  graduationYear Int?
  gender         Student_gender?
  userId         Int?
  personId       Int?
  universityID   Int?
  Person         Person?         @relation(fields: [personId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Student_person___fk")

  @@index([personId], map: "Student_person___fk")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model StudentMajorsHistory {
  id        Int       @id @default(autoincrement())
  dateStart DateTime? @db.Date
  dateEnd   DateTime? @db.Date
  majorId   Int
  studentId Int

  @@ignore
}

model TeamEventAttendance {
  eventId      Int
  teamID       Int
  TimeAttended DateTime? @db.DateTime(0)

  @@id([eventId, teamID])
}

model TeamUpdate {
  updateID      Int        @id @default(autoincrement())
  teamID        Int
  UpdateDate    DateTime?  @db.DateTime(0)
  MetWithMentor Boolean?   @db.Bit(1)
  MentorNotes   String?    @db.VarChar(500)
  metricID      Int?
  metricValue   String?    @db.VarChar(100)
  metricNotes   String?    @db.VarChar(1000)
  Notes         String?    @db.VarChar(500)
  submitter_id  Int?
  created_by    String?    @db.VarChar(20)
  auth_user     auth_user? @relation(fields: [submitter_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TeamUpdate_submitter_id_6425d1c5_fk_auth_user_id")

  @@index([submitter_id], map: "TeamUpdate_submitter_id_6425d1c5_fk_auth_user_id")
}

model UpdateTopic {
  topicID     Int     @id @default(autoincrement())
  topicName   String? @db.VarChar(100)
  Description String? @db.VarChar(2000)
}

model UpdateTopicData {
  topicID  Int
  updateID Int
  Response String? @db.VarChar(300)

  @@id([topicID, updateID])
}

model auth_group {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique(map: "name") @db.VarChar(150)
  auth_group_permissions auth_group_permissions[]
  auth_user_groups       auth_user_groups[]
}

model auth_group_permissions {
  id              BigInt          @id @default(autoincrement())
  group_id        Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
  auth_group      auth_group      @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissions_group_id_b120cbf9_fk_auth_group_id")

  @@unique([group_id, permission_id], map: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
  @@index([permission_id], map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
}

model auth_permission {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  content_type_id            Int
  codename                   String                       @db.VarChar(100)
  auth_group_permissions     auth_group_permissions[]
  django_content_type        django_content_type          @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_permission_content_type_id_2f476e4b_fk_django_co")
  auth_user_user_permissions auth_user_user_permissions[]

  @@unique([content_type_id, codename], map: "auth_permission_content_type_id_codename_01ab375a_uniq")
}

model auth_user {
  id                         Int                          @id @default(autoincrement())
  password                   String                       @db.VarChar(128)
  last_login                 DateTime?                    @db.DateTime(6)
  is_superuser               Boolean
  username                   String                       @unique(map: "username") @db.VarChar(150)
  first_name                 String                       @db.VarChar(150)
  last_name                  String                       @db.VarChar(150)
  email                      String                       @db.VarChar(254)
  is_staff                   Boolean
  is_active                  Boolean
  date_joined                DateTime                     @db.DateTime(6)
  TeamUpdate                 TeamUpdate[]
  auth_user_groups           auth_user_groups[]
  auth_user_user_permissions auth_user_user_permissions[]
  django_admin_log           django_admin_log[]
}

model auth_user_groups {
  id         BigInt     @id @default(autoincrement())
  user_id    Int
  group_id   Int
  auth_group auth_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
  auth_user  auth_user  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_user_id_6a12ed8b_fk_auth_user_id")

  @@unique([user_id, group_id], map: "auth_user_groups_user_id_group_id_94350c0c_uniq")
  @@index([group_id], map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
}

model auth_user_user_permissions {
  id              BigInt          @id @default(autoincrement())
  user_id         Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
  auth_user       auth_user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id")

  @@unique([user_id, permission_id], map: "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq")
  @@index([permission_id], map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model django_admin_log {
  id                  Int                  @id @default(autoincrement())
  action_time         DateTime             @db.DateTime(6)
  object_id           String?              @db.LongText
  object_repr         String               @db.VarChar(200)
  action_flag         Int                  @db.UnsignedSmallInt
  change_message      String               @db.LongText
  content_type_id     Int?
  user_id             Int
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  auth_user           auth_user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")

  @@index([content_type_id], map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  @@index([user_id], map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")
}

model django_content_type {
  id               Int                @id @default(autoincrement())
  app_label        String             @db.VarChar(100)
  model            String             @db.VarChar(100)
  auth_permission  auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model], map: "django_content_type_app_label_model_76bd3d3b_uniq")
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.DateTime(6)
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String   @db.LongText
  expire_date  DateTime @db.DateTime(6)

  @@index([expire_date], map: "django_session_expire_date_a5c62663")
}

model temp_person {
  personID      Int     @id @default(autoincrement())
  FirstName     String? @db.VarChar(50)
  LastName      String? @db.VarChar(50)
  PreferredName String? @db.VarChar(255)
  NetID         String? @db.VarChar(20)
  Gender        String? @db.VarChar(32)
  Email         String? @db.VarChar(100)
  Phone         String? @db.VarChar(14)
  Ethnicity     String? @db.VarChar(255)
  City          String? @db.VarChar(50)
  State         String? @db.Char(20)
  Country       String? @db.Char(10)
  LinkedInURL   String? @db.VarChar(200)
}

model temp_student {
  personID         Int     @id
  NetID            String? @unique(map: "NetID") @db.VarChar(20)
  UniversityID     Int?    @unique(map: "ByuID")
  ClassStanding    String? @db.VarChar(20)
  College          String? @db.VarChar(150)
  GraduationYear   Int?
  Major            String? @db.VarChar(255)
  ExpectedGradYear Int?
  EventTerm        String? @db.VarChar(255)
  UniversityEmail  String? @db.VarChar(255)
}

model Business {
  id              Int                     @id @default(autoincrement())
  businessName    String?                 @db.VarChar(200)
  companyCategory String?                 @db.VarChar(100)
  companyIndustry String?                 @db.VarChar(100)
  model           String?                 @db.VarChar(20)
  websiteURL      String?                 @db.VarChar(300)
  dateFounded     DateTime?               @db.DateTime(0)
  dateEnded       DateTime?               @db.DateTime(0)
  description     String?                 @db.LongText
  isPublic        Boolean?                @db.Bit(1)
  stage           String?                 @db.VarChar(100)
  currentMetricId Int?
  linkedInUrl     String?                 @db.VarChar(500)
  logo            String?                 @db.VarChar(255)
  businessStatus  Business_businessStatus @default(ACTIVE)
  activityLogs    Json
  createdById     Int
  createdAt       DateTime                @default(now()) @db.DateTime(0)
  updatedAt       DateTime
}

model BusinessMember {
  id               Int                             @id @default(autoincrement())
  userId           Int
  businessId       Int
  firstName        String?                         @db.VarChar(50)
  lastName         String?                         @db.VarChar(50)
  role             BusinessMember_role
  primaryContact   Boolean                         @default(false)
  ownership        Float?
  notes            String?                         @db.VarChar(300)
  dateLeft         DateTime?                       @db.DateTime(0)
  dateJoined       DateTime?                       @db.DateTime(0)
  membershipStatus BusinessMember_membershipStatus @default(ACTIVE)
  invitedById      Int?
  activityLogs     Json
  createdAt        DateTime                        @default(now()) @db.DateTime(0)
  updatedAt        DateTime

  @@unique([businessId, userId, membershipStatus])
}

model Funding {
  id               Int      @id @default(autoincrement())
  contactName      String   @db.VarChar(150)
  contactEmail     String   @db.VarChar(100)
  contactPhone     String   @db.VarChar(14)
  companyName      String   @db.VarChar(255)
  approvedAmount   Float
  approvedDatetime DateTime @db.DateTime(0)
  grantRequestId   Int
  businessId       Int
  contactId        Int
  approvedById     Int
  activityLogs     Json
  createdAt        DateTime @default(now()) @db.DateTime(0)
  updatedAt        DateTime
}

model GrantApplication {
  id                Int                                @id @default(autoincrement())
  name              String                             @db.VarChar(255)
  description       String                             @db.LongText
  grantTypeId       Int
  formId            Int
  startDate         DateTime                           @db.Date
  endDate           DateTime?                          @db.Date
  applicationStatus GrantApplication_applicationStatus @default(ACTIVE)
  createdById       Int
  createdAt         DateTime                           @default(now()) @db.DateTime(0)
  updatedAt         DateTime
}

model GrantRequest {
  id                 Int                            @id @default(autoincrement())
  businessId         Int
  submissionId       Int                            @unique
  grantApplicationId Int
  reviewStageId      Int?
  applicationStatus  GrantRequest_applicationStatus @default(SUBMITTED)
  submittedById      Int
  activityLogs       Json
  createdAt          DateTime                       @default(now()) @db.DateTime(0)
  updatedAt          DateTime                       @db.DateTime(0)
}

model GrantType {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  status    GrantType_status @default(ACTIVE)
  createdAt DateTime         @default(now()) @db.DateTime(0)
  updatedAt DateTime
}

model OLD_GrantHistory {
  grantID     Int       @id @default(autoincrement())
  teamId      Int
  AwardAmount Int?
  GrantType   String?   @db.VarChar(50)
  DateAwarded DateTime? @db.DateTime(0)
}

model OLD_Major {
  majorID   Int     @id @default(autoincrement())
  MajorName String? @unique(map: "MajorName") @db.VarChar(130)
}

model OLD_Person {
  personID       Int              @id @default(autoincrement())
  FirstName      String?          @db.VarChar(50)
  LastName       String?          @db.VarChar(50)
  PreferredName  String?          @db.VarChar(255)
  NetID          String?          @unique(map: "Person_NetID_key") @db.VarChar(20)
  Gender         String?          @db.VarChar(32)
  Email          String?          @db.VarChar(100)
  Phone          String?          @db.VarChar(14)
  Ethnicity      String?          @db.VarChar(255)
  City           String?          @db.VarChar(50)
  State          String?          @db.Char(20)
  Country        String?          @db.Char(10)
  LinkedInURL    String?          @db.VarChar(200)
  needsUpdate    Boolean?
  OLD_Student    OLD_Student?
  OLD_temp_grant OLD_temp_grant[]
}

model OLD_Student {
  personID         Int        @id
  NetID            String?    @unique(map: "NetID") @db.VarChar(20)
  UniversityID     Int?       @unique(map: "ByuID")
  ClassStanding    String?    @db.VarChar(20)
  College          String?    @db.VarChar(150)
  GraduationYear   Int?
  Major            String?    @db.VarChar(255)
  ExpectedGradYear Int?
  EventTerm        String?    @db.VarChar(255)
  UniversityEmail  String?    @db.VarChar(255)
  OLD_Person       OLD_Person @relation(fields: [personID], references: [personID], onDelete: NoAction, onUpdate: NoAction, map: "OLD_Student_ibfk_1")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model OLD_StudentMajorsHistory {
  majorID   Int
  personID  Int
  DateStart DateTime? @db.Date
  DateEnd   DateTime? @db.Date

  @@ignore
}

model OLD_TeamMembership {
  personID   Int
  teamID     Int
  DateJoined DateTime? @db.DateTime(0)
  DateLeft   DateTime? @db.DateTime(0)
  Role       String?   @db.VarChar(100)
  CoFounder  Boolean?  @db.Bit(1)
  Notes      String?   @db.VarChar(300)
  id         Int?

  @@id([personID, teamID])
}

model OLD_TeamMentor {
  personID     Int
  teamID       Int
  StartDate    DateTime?      @db.Date
  EndDate      DateTime?      @db.Date
  MentorUpdate MentorUpdate[]

  @@id([personID, teamID])
}

model OLD_team {
  teamID          Int       @id @default(autoincrement())
  TeamName        String?   @db.VarChar(200)
  CompanyCategory String?   @db.VarChar(100)
  CompanyIndustry String?   @db.VarChar(100)
  Model           String?   @db.VarChar(20)
  WebsiteURL      String?   @db.VarChar(300)
  DateFounded     DateTime? @db.DateTime(0)
  DateEnded       DateTime? @db.DateTime(0)
  Description     String?   @db.VarChar(400)
  IsPublic        Boolean?  @db.Bit(1)
  Stage           String?   @db.VarChar(100)
  CurrentMetricID Int?
  LinkedInURL     String?   @db.VarChar(500)
  Logo            String?   @db.VarChar(255)
  created_by      String    @db.VarChar(20)
  created_at      DateTime  @default(now()) @db.DateTime(0)
  updated_at      DateTime? @db.DateTime(0)
}

model OLD_temp_grant {
  ContactName      String?     @db.VarChar(150)
  ContactEmail     String?     @db.VarChar(100)
  CompanyName      String?     @db.VarChar(255)
  ContactPhone     String?     @db.VarChar(14)
  ApprovalAmount   Decimal?    @db.Decimal(10, 2)
  GrantDate        DateTime?   @db.Date
  grantID          Int         @id @default(autoincrement())
  teamId           Int?        @default(0)
  contactId        Int?
  ContactFirstName String?     @db.VarChar(255)
  ContactLastName  String?     @db.VarChar(255)
  OLD_Person       OLD_Person? @relation(fields: [contactId], references: [personID], onDelete: NoAction, onUpdate: NoAction, map: "fk_contactId")

  @@index([contactId], map: "fk_contactId")
}

model User {
  id             Int                @id @default(autoincrement())
  firstName      String             @db.VarChar(50)
  lastName       String             @db.VarChar(50)
  email          String?            @db.VarChar(100)
  byuEmail       String?            @db.VarChar(100)
  phone          String?            @db.VarChar(14)
  password       String             @db.VarChar(100)
  photoUrl       String?            @db.VarChar(200)
  address        String?            @db.VarChar(200)
  linkedInUrl    String?            @db.VarChar(200)
  preferredName  String?            @db.VarChar(255)
  byuVerified    Boolean            @default(dbgenerated("b'0'")) @db.Bit(1)
  emailVerified  Boolean            @default(dbgenerated("b'0'")) @db.Bit(1)
  userType       User_userType      @default(USER)
  accountStatus  User_accountStatus @default(NON_VERIFIED)
  personId       Int?
  accountLogs    Json
  lastAccessDate DateTime?          @db.DateTime(0)
  createdAt      DateTime           @default(now()) @db.DateTime(0)
  updatedAt      DateTime           @default(now())

  @@unique([email, accountStatus])
}

enum GrantType_status {
  ACTIVE
  INACTIVE
}

enum BusinessMember_role {
  FOUNDER
  COFOUNDER
  EMPLOYEE
  INTERN
  MENTOR
}

enum GrantRequest_applicationStatus {
  SUBMITTED
  REJECTED
  CANCELLED
  REVIEW
  PENDING
  FEEDBACK
  ACCEPTED
}

enum Student_gender {
  MALE
  FEMALE
  OTHER
}

enum GrantApplication_applicationStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum BusinessMember_membershipStatus {
  ACTIVE
  LEFT
  DEACTIVATED
  SOFT_DELETED
}

enum Person_gender {
  MALE
  FEMALE
  OTHER
}

enum User_userType {
  USER
  MENTOR
  ADMIN
  SUPER_ADMIN
}

enum Business_businessStatus {
  ACTIVE
  DEACTIVATED
  SOFT_DELETED
}

enum User_accountStatus {
  NON_VERIFIED
  VERIFIED
  DEACTIVATED
  SOFT_DELETED
}
